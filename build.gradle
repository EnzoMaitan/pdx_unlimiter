import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.beryx.jlink' version '2.23.3'
    id "org.moditect.gradleplugin" version "1.0.0-rc3"
}

setVersion '2.8.4'

if (!file("${projectDir}/pdxu.properties").exists()) {
    file("${projectDir}/pdxu.properties").write(file("${projectDir}/pdxu.properties.default").getText())
}


java {
    modularity.inferModulePath = true
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

dependencies {
    implementation project(':pdxu-editor')
    implementation project(':pdxu-app')
    implementation project(':pdxu-io')
    implementation project(':pdxu-model')
}

repositories {
    mavenCentral()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        url = 'https://maven.nikr.net/'
    }
    maven { url "https://jitpack.io" }
}

List<String> runArgs = [
        "--add-exports", "javafx.graphics/com.sun.javafx.scene=com.jfoenix",
        "--add-exports", "javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports", "javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports", "javafx.base/com.sun.javafx.event=com.jfoenix",
        "--add-exports", "javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports", "javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-opens", "com.google.gson/com.google.gson.internal=io.sentry",
        "--add-opens", "java.base/java.lang.reflect=com.jfoenix",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model.eu4=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model.ck3=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model.hoi4=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model.stellaris=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model.ck2=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdxu.model/com.crschnick.pdxu.model.vic2=com.fasterxml.jackson.databind",
        "-Xmx4g",
        "-XX:+ExitOnOutOfMemoryError"]

application {
    mainModule = 'com.crschnick.pdxu.app'
    mainClass = 'com.crschnick.pdxu.app.Main'
    applicationDefaultJvmArgs = runArgs + ["-ea"]
}




jlink {
    imageDir = file("$buildDir/image")
    options = [
            // '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages']
    launcher {
        moduleName = 'com.crschnick.pdxu.app'
        mainClassName = 'com.crschnick.pdxu.app.Main'
        name = 'pdxu'
        jvmArgs = runArgs
    }

    customImage {
        appModules = [
                'com.crschnick.pdxu.app',
                'com.crschnick.pdxu.editor',
                'org.slf4j',
                'org.slf4j.simple',
                'jdk.crypto.ec',
                'org.kordamp.ikonli.materialdesign',
                'jdk.zipfs'
        ]
    }

    jpackage {
        imageOutputDir = file("$buildDir/dist")
        imageName = 'Pdx-Unlimiter'
        if (DefaultNativePlatform.currentOperatingSystem.windows) {
            icon = "misc/logo.ico"
        } else {
            icon = "misc/logo.png"
        }
        skipInstaller = true
        applicationName = 'Pdx-Unlimiter'
    }
}

task writeVersion(type: DefaultTask) {
    doLast {
        file("${buildDir}/dist/Pdx-Unlimiter/version").write(String.valueOf(version))
    }
}

task copyResources(type: Copy) {
    into "${buildDir}/dist/Pdx-Unlimiter/resources"
    from "${projectDir}/resources"
}

task copyLang(type: Copy) {
    into "${buildDir}/dist/Pdx-Unlimiter/lang"
    from "${projectDir}/lang"
}

task copyStartScripts(type: Copy) {
    into "${buildDir}/dist/Pdx-Unlimiter/bin"
    if (DefaultNativePlatform.currentOperatingSystem.windows) {
        from "${projectDir}/misc/pdxu.bat"
    } else {
        from "${projectDir}/misc/pdxu"
    }
}

jpackage.finalizedBy(writeVersion, copyResources, copyLang, copyStartScripts)

task createDist(type: Zip, dependsOn: jpackage) {
    destinationDirectory = buildDir
    archivesBaseName = "pdx_unlimiter"
    archiveAppendix = DefaultNativePlatform.currentOperatingSystem.windows ? "windows" : "linux"
    archiveVersion = ""
    from "${buildDir}/dist/Pdx-Unlimiter"
}
