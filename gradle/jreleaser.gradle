def changelogOut = new File(project.buildDir, 'changelog.md')
task writeLatestChangelog(type: DefaultTask) {
    doLast {
        changelogOut.text = file('CHANGELOG.md').text + '\n'
    }
}

def isPreRelease = project.version.endsWith('-pre')
def isFullRelease = !isPreRelease && project.version.endsWith('-SNAPSHOT')
def proj = project;

jreleaser {
    project {
        name = 'Pdx-Unlimiter'
        description = 'A smart savegame manager, editor, and toolbox for all current major Paradox Grand Strategy games.'
        website = 'https://github.com/crschnick/pdx_unlimiter'
        authors = ['Christopher Schnick']
        license = 'GPL3'
        copyright = ' '
    }

    release {
        github {
            skipRelease = !isFullRelease && !isPreRelease
            owner = 'crschnick'
            overwrite = false
            tagName = '{{projectVersion}}'
            releaseName = '{{tagName}}'
            token = proj.hasProperty("PDXU_GITHUB_TOKEN") ? proj.property("PDXU_GITHUB_TOKEN") : System.getenv("JRELEASER_GITHUB_TOKEN")

            files = true
            artifacts = true
            checksums = false
            signatures = false

            prerelease {
                enabled = true
                pattern = '.*-pre'
            }

            update {
                enabled = true
                section('ASSETS')
                section('TITLE')
                section('BODY ')
            }

            changelog {
                enabled = true
                external = changelogOut
            }
        }
    }
    distributions {
        app {
            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                artifact {
                    distributionType = 'BINARY'
                    path = 'build/pdx_unlimiter-windows.zip'
                    platform = 'windows'
                }
            } else {
                artifact {
                    distributionType = 'BINARY'
                    path = 'build/pdx_unlimiter-linux.zip'
                    platform = 'linux'
                }
            }
        }
    }

    announce {
        discord {
            active = 'ALWAYS'

            webhook = proj.hasProperty("PDXU_DISCORD_WEBHOOK") ? proj.property("PDXU_DISCORD_WEBHOOK") : System.getenv("JRELEASER_DISCORD_WEBHOOK")

            messageTemplate = isFullRelease ? 'misc/discord_full.tpl' : (isPreRelease ? 'misc/discord_pre.tpl' : 'misc/discord.tpl')
        }
    }
}
